/**
 * Copyright 2017 Confluent Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

package io.confluent.ksql.function.udf.ml;

/**
 * Created by hojjat on 11/15/17.
 */
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-11-06T14:16:14.440+01:00
  3.14.0.3

  Standalone prediction code with sample test data for DeepLearningModel named DeepLearning_model_R_1509973865970_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DeepLearning_model_R_1509973865970_1 > DeepLearning_model_R_1509973865970_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DeepLearning_model_R_1509973865970_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/

import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DeepLearning_model_R_1509973865970_1", algorithm="deeplearning")
public class DeepLearning_model_R_1509973865970_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.AutoEncoder; }
  public boolean isSupervised() { return false; }
  public int nfeatures() { return 210; }
  public int nclasses() { return 210; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[210];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[210];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 0.20920502092050208;
        sa[1] = 0.2066115702479339;
        sa[2] = 0.2061855670103093;
        sa[3] = 0.20449897750511245;
        sa[4] = 0.20366598778004072;
        sa[5] = 0.20449897750511248