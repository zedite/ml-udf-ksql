/**
 * Copyright 2017 Confluent Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

package io.confluent.ksql.function.udf.ml;

/**
 * Created by hojjat on 11/15/17.
 */
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-11-06T14:16:14.440+01:00
  3.14.0.3

  Standalone prediction code with sample test data for DeepLearningModel named DeepLearning_model_R_1509973865970_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DeepLearning_model_R_1509973865970_1 > DeepLearning_model_R_1509973865970_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DeepLearning_model_R_1509973865970_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/

import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DeepLearning_model_R_1509973865970_1", algorithm="deeplearning")
public class DeepLearning_model_R_1509973865970_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.AutoEncoder; }
  public boolean isSupervised() { return false; }
  public int nfeatures() { return 210; }
  public int nclasses() { return 210; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[210];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[210];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 0.20920502092050208;
        sa[1] = 0.2066115702479339;
        sa[2] = 0.2061855670103093;
        sa[3] = 0.20449897750511245;
        sa[4] = 0.20366598778004072;
        sa[5] = 0.20449897750511248;
        sa[6] = 0.20449897750511245;
        sa[7] = 0.2053388090349076;
        sa[8] = 0.20703933747412007;
        sa[9] = 0.2092050209205021;
        sa[10] = 0.21276595744680854;
        sa[11] = 0.22123893805309736;
        sa[12] = 0.23201856148491876;
        sa[13] = 0.24875621890547267;
        sa[14] = 0.2695417789757412;
        sa[15] = 0.29585798816568043;
        sa[16] = 0.3267973856209151;
        sa[17] = 0.3623188405797102;
        sa[18] = 0.4016064257028112;
        sa[19] = 0.4504504504504505;
        sa[20] = 0.47393364928909965;
        sa[21] = 0.5780346820809247;
        sa[22] = 0.6666666666666666;
        sa[23] = 0.7633587786259545;
        sa[24] = 0.8064516129032256;
        sa[25] = 0.7812500000000004;
        sa[26] = 0.7246376811594204;
        sa[27] = 0.684931506849315;
        sa[28] = 0.6493506493506493;
        sa[29] = 0.628930817610063;
        sa[30] = 0.6172839506172839;
        sa[31] = 0.606060606060606;
        sa[32] = 0.588235294117647;
        sa[33] = 0.595238095238095;
        sa[34] = 0.588235294117647;
        sa[35] = 0.5714285714285714;
        sa[36] = 0.5649717514124293;
        sa[37] = 0.5747126436781609;
        sa[38] = 0.5681818181818182;
        sa[39] = 0.5555555555555556;
        sa[40] = 0.5434782608695653;
        sa[41] = 0.5405405405405407;
        sa[42] = 0.5494505494505494;
        sa[43] = 0.5494505494505494;
        sa[44] = 0.5464480874316939;
        sa[45] = 0.53475935828877;
        sa[46] = 0.5235602094240838;
        sa[47] = 0.5154639175257731;
        sa[48] = 0.5102040816326531;
        sa[49] = 0.5076142131979696;
        sa[50] = 0.505050505050505;
        sa[51] = 0.5076142131979696;
        sa[52] = 0.5076142131979696;
        sa[53] = 0.5128205128205128;
        sa[54] = 0.5076142131979696;
        sa[55] = 0.5181347150259068;
        sa[56] = 0.5263157894736841;
        sa[57] = 0.5291005291005292;
        sa[58] = 0.5376344086021507;
        sa[59] = 0.5405405405405407;
        sa[60] = 0.5434782608695653;
        sa[61] = 0.5464480874316939;
        sa[62] = 0.5464480874316939;
        sa[63] = 0.5586592178770949;
        sa[64] = 0.5714285714285714;
        sa[65] = 0.5952380952380953;
        sa[66] = 0.6097560975609754;
        sa[67] = 0.6329113924050632;
        sa[68] = 0.6711409395973154;
        sa[69] = 0.7092198581560283;
        sa[70] = 0.7299270072992701;
        sa[71] = 0.8064516129032256;
        sa[72] = 0.8771929824561406;
        sa[73] = 0.9523809523809526;
        sa[74] = 1.0101010101010108;
        sa[75] = 1.0869565217391295;
        sa[76] = 1.2048192771084336;
        sa[77] = 1.3513513513513526;
        sa[78] = 1.4492753623188397;
        sa[79] = 1.5624999999999987;
        sa[80] = 1.7543859649122797;
        sa[81] = 2.0408163265306114;
        sa[82] = 2.173913043478261;
        sa[83] = 2.2222222222222214;
        sa[84] = 2.4390243902439015;
        sa[85] = 2.7027027027027017;
        sa[86] = 3.03030303030303;
        sa[87] = 2.85714285714286;
        sa[88] = 3.03030303030303;
        sa[89] = 3.571428571428568;
        sa[90] = 3.7037037037037095;
        sa[91] = 3.7037037037037095;
        sa[92] = 3.7037037037037095;
        sa[93] = 3.8461538461538494;
        sa[94] = 3.8461538461538494;
        sa[95] = 3.7037037037036975;
        sa[96] = 3.7037037037036975;
        sa[97] = 4.0;
        sa[98] = 3.7037037037036975;
        sa[99] = 3.7037037037036975;
        sa[100] = 4.0;
        sa[101] = 3.7037037037037095;
        sa[102] = 3.7037037037037095;
        sa[103] = 3.8461538461538494;
        sa[104] = 3.571428571428568;
        sa[105] = 3.7037037037037095;
        sa[106] = 3.7037037037037095;
        sa[107] = 3.8461538461538494;
        sa[108] = 3.4482758620689653;
        sa[109] = 3.4482758620689653;
        sa[110] = 3.7037037037037095;
        sa[111] = 3.5714285714285796;
        sa[112] = 3.4482758620689653;
        sa[113] = 3.5714285714285796;
        sa[114] = 3.7037037037036975;
        sa[115] = 3.8461538461538494;
        sa[116] = 3.571428571428568;
        sa[117] = 3.5714285714285796;
        sa[118] = 3.571428571428568;
        sa[119] = 3.846153846153836;
        sa[120] = 3.846153846153836;
        sa[121] = 3.571428571428568;
        sa[122] = 4.0;
        sa[123] = 3.8461538461538494;
        sa[124] = 3.8461538461538494;
        sa[125] = 4.0;
        sa[126] = 4.3478260869565135;
        sa[127] = 4.54545454545455;
        sa[128] = 4.1666666666666785;
        sa[129] = 4.3478260869565135;
        sa[130] = 1.515151515151515;
        sa[131] = 1.0204081632653066;
        sa[132] = 1.4084507042253522;
        sa[133] = 2.0833333333333353;
        sa[134] = 2.272727272727275;
        sa[135] = 1.8518518518518516;
        sa[136] = 0.9615384615384615;
        sa[137] = 1.515151515151515;
        sa[138] = 1.1235955056179778;
        sa[139] = 0.8695652173913041;
        sa[140] = 0.8130081300813006;
        sa[141] = 0.5235602094240838;
        sa[142] = 0.49751243781094523;
        sa[143] = 0.4219409282700421;
        sa[144] = 0.3508771929824561;
        sa[145] = 0.3289473684210526;
        sa[146] = 0.3623188405797102;
        sa[147] = 0.33003300330033003;
        sa[148] = 0.27932960893854747;
        sa[149] = 0.27855153203342614;
        sa[150] = 0.2717391304347826;
        sa[151] = 0.2688172043010753;
        sa[152] = 0.2967359050445104;
        sa[153] = 0.3105590062111801;
        sa[154] = 0.3134796238244514;
        sa[155] = 0.32051282051282054;
        sa[156] = 0.326797385620915;
        sa[157] = 0.2808988764044944;
        sa[158] = 0.25641025641025644;
        sa[159] = 0.25839793281653745;
        sa[160] = 0.267379679144385;
        sa[161] = 0.2906976744186046;
        sa[162] = 0.2985074626865672;
        sa[163] = 0.2695417789757412;
        sa[164] = 0.25062656641604014;
        sa[165] = 0.25125628140703515;
        sa[166] = 0.2617801047120419;
        sa[167] = 0.26881720430107525;
        sa[168] = 0.2617801047120419;
        sa[169] = 0.2688172043010752;
        sa[170] = 0.29411764705882354;
        sa[171] = 0.30581039755351686;
        sa[172] = 0.31055900621118016;
        sa[173] = 0.29069767441860467;
        sa[174] = 0.2604166666666667;
        sa[175] = 0.25252525252525254;
        sa[176] = 0.26455026455026454;
        sa[177] = 0.26109660574412535;
        sa[178] = 0.25839793281653745;
        sa[179] = 0.25641025641025644;
        sa[180] = 0.2518891687657431;
        sa[181] = 0.25000000000000006;
        sa[182] = 0.24752475247524752;
        sa[183] = 0.24630541871921185;
        sa[184] = 0.24390243902439027;
        sa[185] = 0.24449877750611249;
        sa[186] = 0.24213075060532682;
        sa[187] = 0.24096385542168672;
        sa[188] = 0.23696682464454977;
        sa[189] = 0.2347417840375587;
        sa[190] = 0.23255813953488372;
        sa[191] = 0.2320185614849188;
        sa[192] = 0.2298850574712644;
        sa[193] = 0.22779043280182235;
        sa[194] = 0.2252252252252252;
        sa[195] = 0.2242152466367713;
        sa[196] = 0.22271714922048996;
        sa[197] = 0.22271714922048996;
        sa[198] = 0.22123893805309736;
        sa[199] = 0.21978021978021978;
        sa[200] = 0.2178649237472767;
        sa[201] = 0.2173913043478261;
        sa[202] = 0.21645021645021645;
        sa[203] = 0.21505376344086025;
        sa[204] = 0.21186440677966104;
        sa[205] = 0.21008403361344538;
        sa[206] = 0.20920502092050208;
        sa[207] = 0.20746887966804978;
        sa[208] = 0.20703933747412007;
        sa[209] = 0.20703933747412007;
      }
    }
  }
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[210];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 4.8415;
        sa[1] = 4.9085;
        sa[2] = 4.964499999999999;
        sa[3] = 5.022;
        sa[4] = 5.0775;
        sa[5] = 5.137;
        sa[6] = 5.210000000000001;
        sa[7] = 5.287999999999999;
        sa[8] = 5.3685;
        sa[9] = 5.4555;
        sa[10] = 5.534;
        sa[11] = 5.6434999999999995;
        sa[12] = 5.747999999999999;
        sa[13] = 5.846500000000001;
        sa[14] = 5.9445;
        sa[15] = 6.019;
        sa[16] = 6.1065000000000005;
        sa[17] = 6.1770000000000005;
        sa[18] = 6.2355;
        sa[19] = 6.2829999999999995;
        sa[20] = 6.3134999999999994;
        sa[21] = 6.3465;
        sa[22] = 6.3675;
        sa[23] = 6.3795;
        sa[24] = 6.382;
        sa[25] = 6.379;
        sa[26] = 6.380999999999999;
        sa[27] = 6.3765;
        sa[28] = 6.367;
        sa[29] = 6.3605;
        sa[30] = 6.350499999999999;
        sa[31] = 6.340000000000001;
        sa[32] = 6.3260000000000005;
        sa[33] = 6.3145;
        sa[34] = 6.298;
        sa[35] = 6.2829999999999995;
        sa[36] = 6.2675;
        sa[37] = 6.247999999999999;
        sa[38] = 6.2305;
        sa[39] = 6.209999999999999;
        sa[40] = 6.188000000000001;
        sa[41] = 6.167999999999999;
        sa[42] = 6.1450000000000005;
        sa[43] = 6.12;
        sa[44] = 6.0975;
        sa[45] = 6.0755;
        sa[46] = 6.0475;
        sa[47] = 6.0225;
        sa[48] = 5.9990000000000006;
        sa[49] = 5.9765;
        sa[50] = 5.954;
        sa[51] = 5.9270000000000005;
        sa[52] = 5.901;
        sa[53] = 5.8765;
        sa[54] = 5.858500000000001;
        sa[55] = 5.8345;
        sa[56] = 5.808;
        sa[57] = 5.7780000000000005;
        sa[58] = 5.754;
        sa[59] = 5.7235;
        sa[60] = 5.697;
        sa[61] = 5.669;
        sa[62] = 5.638999999999999;
        sa[63] = 5.609;
        sa[64] = 5.5805;
        sa[65] = 5.5520000000000005;
        sa[66] = 5.518;
        sa[67] = 5.488999999999999;
        sa[68] = 5.456;
        sa[69] = 5.430000000000001;
        sa[70] = 5.407000000000001;
        sa[71] = 5.3765;
        sa[72] = 5.3515;
        sa[73] = 5.3295;
        sa[74] = 5.3075;
        sa[75] = 5.288500000000001;
        sa[76] = 5.2695;
        sa[77] = 5.2509999999999994;
        sa[78] = 5.234;
        sa[79] = 5.221;
        sa[80] = 5.2065;
        sa[81] = 5.1935;
        sa[82] = 5.183999999999999;
        sa[83] = 5.1739999999999995;
        sa[84] = 5.165;
        sa[85] = 5.1555;
        sa[86] = 5.1485;
        sa[87] = 5.14;
        sa[88] = 5.133;
        sa[89] = 5.128;
        sa[90] = 5.121499999999999;
        sa[91] = 5.116999999999999;
        sa[92] = 5.112;
        sa[93] = 5.1045;
        sa[94] = 5.103;
        sa[95] = 5.0954999999999995;
        sa[96] = 5.0954999999999995;
        sa[97] = 5.09;
        sa[98] = 5.089;
        sa[99] = 5.083500000000001;
        sa[100] = 5.0775;
        sa[101] = 5.0785;
        sa[102] = 5.076;
        sa[103] = 5.0755;
        sa[104] = 5.071;
        sa[105] = 5.0705;
        sa[106] = 5.0675;
        sa[107] = 5.063;
        sa[108] = 5.062;
        sa[109] = 5.0585;
        sa[110] = 5.055000000000001;
        sa[111] = 5.0515;
        sa[112] = 5.0465;
        sa[113] = 5.0455;
        sa[114] = 5.0425;
        sa[115] = 5.04;
        sa[116] = 5.0375;
        sa[117] = 5.037;
        sa[118] = 5.032500000000001;
        sa[119] = 5.0295000000000005;
        sa[120] = 5.0265;
        sa[121] = 5.0235;
        sa[122] = 5.022499999999999;
        sa[123] = 5.0155;
        sa[124] = 5.015000000000001;
        sa[125] = 5.0120000000000005;
        sa[126] = 5.0105;
        sa[127] = 5.0035;
        sa[128] = 5.002;
        sa[129] = 5.008;
        sa[130] = 5.026000000000001;
        sa[131] = 5.039;
        sa[132] = 5.026;
        sa[133] = 5.0120000000000005;
        sa[134] = 5.024;
        sa[135] = 5.026999999999999;
        sa[136] = 5.05;
        sa[137] = 5.036999999999999;
        sa[138] = 5.05;
        sa[139] = 5.054;
        sa[140] = 5.038;
        sa[141] = 5.022499999999999;
        sa[142] = 4.9965;
        sa[143] = 4.9745;
        sa[144] = 4.9455;
        sa[145] = 4.911;
        sa[146] = 4.857499999999999;
        sa[147] = 4.8575;
        sa[148] = 4.8635;
        sa[149] = 4.8149999999999995;
        sa[150] = 4.769;
        sa[151] = 4.6975;
        sa[152] = 4.6195;
        sa[153] = 4.544;
        sa[154] = 4.482;
        sa[155] = 4.4275;
        sa[156] = 4.3695;
        sa[157] = 4.3385;
        sa[158] = 4.313999999999999;
        sa[159] = 4.2555;
        sa[160] = 4.171;
        sa[161] = 4.106;
        sa[162] = 4.0695;
        sa[163] = 4.067;
        sa[164] = 4.074000000000001;
        sa[165] = 4.1015;
        sa[166] = 4.0755;
        sa[167] = 4.0455;
        sa[168] = 4.016500000000001;
        sa[169] = 3.9795000000000003;
        sa[170] = 3.937;
        sa[171] = 3.914;
        sa[172] = 3.893;
        sa[173] = 3.8930000000000007;
        sa[174] = 3.904500000000001;
        sa[175] = 3.9010000000000007;
        sa[176] = 3.8599999999999994;
        sa[177] = 3.8455;
        sa[178] = 3.8389999999999995;
        sa[179] = 3.8409999999999997;
        sa[180] = 3.8465000000000003;
        sa[181] = 3.8950000000000005;
        sa[182] = 3.9545000000000003;
        sa[183] = 3.9975;
        sa[184] = 4.035;
        sa[185] = 4.101000000000001;
        sa[186] = 4.156000000000001;
        sa[187] = 4.229;
        sa[188] = 4.3175;
        sa[189] = 4.346;
        sa[190] = 4.3365;
        sa[191] = 4.358;
        sa[192] = 4.385;
        sa[193] = 4.411499999999999;
        sa[194] = 4.4345;
        sa[195] = 4.453;
        sa[196] = 4.4595;
        sa[197] = 4.461499999999999;
        sa[198] = 4.468999999999999;
        sa[199] = 4.489;
        sa[200] = 4.5135;
        sa[201] = 4.557;
        sa[202] = 4.6;
        sa[203] = 4.652;
        sa[204] = 4.7045;
        sa[205] = 4.7635;
        sa[206] = 4.8345;
        sa[207] = 4.8965000000000005;
        sa[208] = 4.9615;
        sa[209] = 5.0275;
      }
    }
  }
  // Offset into the workspace for categorical variables.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {210,50,20,50,210};
  public int getPredsSize() { return 210; }
  public boolean isAutoEncoder() { return true; }
  public String getHeader() { return "reconstr_C1,reconstr_C2,reconstr_C3,reconstr_C4,reconstr_C5,reconstr_C6,reconstr_C7,reconstr_C8,reconstr_C9,reconstr_C10,reconstr_C11,reconstr_C12,reconstr_C13,reconstr_C14,reconstr_C15,reconstr_C16,reconstr_C17,reconstr_C18,reconstr_C19,reconstr_C20,reconstr_C21,reconstr_C22,reconstr_C23,reconstr_C24,reconstr_C25,reconstr_C26,reconstr_C27,reconstr_C28,reconstr_C29,reconstr_C30,reconstr_C31,reconstr_C32,reconstr_C33,reconstr_C34,reconstr_C35,reconstr_C36,reconstr_C37,reconstr_C38,reconstr_C39,reconstr_C40,reconstr_C41,reconstr_C42,reconstr_C43,reconstr_C44,reconstr_C45,reconstr_C46,reconstr_C47,reconstr_C48,reconstr_C49,reconstr_C50,reconstr_C51,reconstr_C52,reconstr_C53,reconstr_C54,reconstr_C55,reconstr_C56,reconstr_C57,reconstr_C58,reconstr_C59,reconstr_C60,reconstr_C61,reconstr_C62,reconstr_C63,reconstr_C64,reconstr_C65,reconstr_C66,reconstr_C67,reconstr_C68,reconstr_C69,reconstr_C70,reconstr_C71,reconstr_C72,reconstr_C73,reconstr_C74,reconstr_C75,reconstr_C76,reconstr_C77,reconstr_C78,reconstr_C79,reconstr_C80,reconstr_C81,reconstr_C82,reconstr_C83,reconstr_C84,reconstr_C85,reconstr_C86,reconstr_C87,reconstr_C88,reconstr_C89,reconstr_C90,reconstr_C91,reconstr_C92,reconstr_C93,reconstr_C94,reconstr_C95,reconstr_C96,reconstr_C97,reconstr_C98,reconstr_C99,reconstr_C100,reconstr_C101,reconstr_C102,reconstr_C103,reconstr_C104,reconstr_C105,reconstr_C106,reconstr_C107,reconstr_C108,reconstr_C109,reconstr_C110,reconstr_C111,reconstr_C112,reconstr_C113,reconstr_C114,reconstr_C115,reconstr_C116,reconstr_C117,reconstr_C118,reconstr_C119,reconstr_C120,reconstr_C121,reconstr_C122,reconstr_C123,reconstr_C124,reconstr_C125,reconstr_C126,reconstr_C127,reconstr_C128,reconstr_C129,reconstr_C130,reconstr_C131,reconstr_C132,reconstr_C133,reconstr_C134,reconstr_C135,reconstr_C136,reconstr_C137,reconstr_C138,reconstr_C139,reconstr_C140,reconstr_C141,reconstr_C142,reconstr_C143,reconstr_C144,reconstr_C145,reconstr_C146,reconstr_C147,reconstr_C148,reconstr_C149,reconstr_C150,reconstr_C151,reconstr_C152,reconstr_C153,reconstr_C154,reconstr_C155,reconstr_C156,reconstr_C157,reconstr_C158,reconstr_C159,reconstr_C160,reconstr_C161,reconstr_C162,reconstr_C163,reconstr_C164,reconstr_C165,reconstr_C166,reconstr_C167,reconstr_C168,reconstr_C169,reconstr_C170,reconstr_C171,reconstr_C172,reconstr_C173,reconstr_C174,reconstr_C175,reconstr_C176,reconstr_C177,reconstr_C178,reconstr_C179,reconstr_C180,reconstr_C181,reconstr_C182,reconstr_C183,reconstr_C184,reconstr_C185,reconstr_C186,reconstr_C187,reconstr_C188,reconstr_C189,reconstr_C190,reconstr_C191,reconstr_C192,reconstr_C193,reconstr_C194,reconstr_C195,reconstr_C196,reconstr_C197,reconstr_C198,reconstr_C199,reconstr_C200,reconstr_C201,reconstr_C202,reconstr_C203,reconstr_C204,reconstr_C205,reconstr_C206,reconstr_C207,reconstr_C208,reconstr_C209,reconstr_C210"; }
  // Thread-local storage for neuron activation values.
  final double[][] ACTIVATION = new double[][] {
      /* Input */ new double[210],
      /* Tanh */ new double[50],
      /* Tanh */ new double[20],
      /* Tanh */ new double[50],
      /* Tanh */ new double[210]
  };
  // Neuron bias values.
  public static final double[][] BIAS = new double[][] {
      /* Input */ DeepLearning_model_R_1509973865970_1_Bias_0.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Bias_1.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Bias_2.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Bias_3.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Bias_4.VALUES
  };
  // Connecting weights between neurons.
  public static final float[][] WEIGHT = new float[][] {
      /* Input */ DeepLearning_model_R_1509973865970_1_Weight_0.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Weight_1.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Weight_2.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Weight_3.VALUES,
      /* Tanh */ DeepLearning_model_R_1509973865970_1_Weight_4.VALUES
  };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DeepLearning_model_R_1509973865970_1.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C1 */ null,
    /* C2 */ null,
    /* C3 */ null,
    /* C4 */ null,
    /* C5 */ null,
    /* C6 */ null,
    /* C7 */ null,
    /* C8 */ null,
    /* C9 */ null,
    /* C10 */ null,
    /* C11 */ null,
    /* C12 */ null,
    /* C13 */ null,
    /* C14 */ null,
    /* C15 */ null,
    /* C16 */ null,
    /* C17 */ null,
    /* C18 */ null,
    /* C19 */ null,
    /* C20 */ null,
    /* C21 */ null,
    /* C22 */ null,
    /* C23 */ null,
    /* C24 */ null,
    /* C25 */ null,
    /* C26 */ null,
    /* C27 */ null,
    /* C28 */ null,
    /* C29 */ null,
    /* C30 */ null,
    /* C31 */ null,
    /* C32 */ null,
    /* C33 */ null,
    /* C34 */ null,
    /* C35 */ null,
    /* C36 */ null,
    /* C37 */ null,
    /* C38 */ null,
    /* C39 */ null,
    /* C40 */ null,
    /* C41 */ null,
    /* C42 */ null,
    /* C43 */ null,
    /* C44 */ null,
    /* C45 */ null,
    /* C46 */ null,
    /* C47 */ null,
    /* C48 */ null,
    /* C49 */ null,
    /* C50 */ null,
    /* C51 */ null,
    /* C52 */ null,
    /* C53 */ null,
    /* C54 */ null,
    /* C55 */ null,
    /* C56 */ null,
    /* C57 */ null,
    /* C58 */ null,
    /* C59 */ null,
    /* C60 */ null,
    /* C61 */ null,
    /* C62 */ null,
    /* C63 */ null,
    /* C64 */ null,
    /* C65 */ null,
    /* C66 */ null,
    /* C67 */ null,
    /* C68 */ null,
    /* C69 */ null,
    /* C70 */ null,
    /* C71 */ null,
    /* C72 */ null,
    /* C73 */ null,
    /* C74 */ null,
    /* C75 */ null,
    /* C76 */ null,
    /* C77 */ null,
    /* C78 */ null,
    /* C79 */ null,
    /* C80 */ null,
    /* C81 */ null,
    /* C82 */ null,
    /* C83 */ null,
    /* C84 */ null,
    /* C85 */ null,
    /* C86 */ null,
    /* C87 */ null,
    /* C88 */ null,
    /* C89 */ null,
    /* C90 */ null,
    /* C91 */ null,
    /* C92 */ null,
    /* C93 */ null,
    /* C94 */ null,
    /* C95 */ null,
    /* C96 */ null,
    /* C97 */ null,
    /* C98 */ null,
    /* C99 */ null,
    /* C100 */ null,
    /* C101 */ null,
    /* C102 */ null,
    /* C103 */ null,
    /* C104 */ null,
    /* C105 */ null,
    /* C106 */ null,
    /* C107 */ null,
    /* C108 */ null,
    /* C109 */ null,
    /* C110 */ null,
    /* C111 */ null,
    /* C112 */ null,
    /* C113 */ null,
    /* C114 */ null,
    /* C115 */ null,
    /* C116 */ null,
    /* C117 */ null,
    /* C118 */ null,
    /* C119 */ null,
    /* C120 */ null,
    /* C121 */ null,
    /* C122 */ null,
    /* C123 */ null,
    /* C124 */ null,
    /* C125 */ null,
    /* C126 */ null,
    /* C127 */ null,
    /* C128 */ null,
    /* C129 */ null,
    /* C130 */ null,
    /* C131 */ null,
    /* C132 */ null,
    /* C133 */ null,
    /* C134 */ null,
    /* C135 */ null,
    /* C136 */ null,
    /* C137 */ null,
    /* C138 */ null,
    /* C139 */ null,
    /* C140 */ null,
    /* C141 */ null,
    /* C142 */ null,
    /* C143 */ null,
    /* C144 */ null,
    /* C145 */ null,
    /* C146 */ null,
    /* C147 */ null,
    /* C148 */ null,
    /* C149 */ null,
    /* C150 */ null,
    /* C151 */ null,
    /* C152 */ null,
    /* C153 */ null,
    /* C154 */ null,
    /* C155 */ null,
    /* C156 */ null,
    /* C157 */ null,
    /* C158 */ null,
    /* C159 */ null,
    /* C160 */ null,
    /* C161 */ null,
    /* C162 */ null,
    /* C163 */ null,
    /* C164 */ null,
    /* C165 */ null,
    /* C166 */ null,
    /* C167 */ null,
    /* C168 */ null,
    /* C169 */ null,
    /* C170 */ null,
    /* C171 */ null,
    /* C172 */ null,
    /* C173 */ null,
    /* C174 */ null,
    /* C175 */ null,
    /* C176 */ null,
    /* C177 */ null,
    /* C178 */ null,
    /* C179 */ null,
    /* C180 */ null,
    /* C181 */ null,
    /* C182 */ null,
    /* C183 */ null,
    /* C184 */ null,
    /* C185 */ null,
    /* C186 */ null,
    /* C187 */ null,
    /* C188 */ null,
    /* C189 */ null,
    /* C190 */ null,
    /* C191 */ null,
    /* C192 */ null,
    /* C193 */ null,
    /* C194 */ null,
    /* C195 */ null,
    /* C196 */ null,
    /* C197 */ null,
    /* C198 */ null,
    /* C199 */ null,
    /* C200 */ null,
    /* C201 */ null,
    /* C202 */ null,
    /* C203 */ null,
    /* C204 */ null,
    /* C205 */ null,
    /* C206 */ null,
    /* C207 */ null,
    /* C208 */ null,
    /* C209 */ null,
    /* C210 */ null
  };

  public DeepLearning_model_R_1509973865970_1() { super(NAMES,DOMAINS,null); }
  public String getUUID() { return Long.toString(-8018014657874625505L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<=ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, reconstructed NaN.");
          preds[r] = ACTIVATION[i][r];
        }
        for (int k=0; k<210; ++k) {
          preds[k] = preds[k] / NORMMUL.VALUES[k-0] + NORMSUB.VALUES[k-0];
        }
      }
    }
    return preds;
  }
}
// Neuron bias values for Input layer
class DeepLearning_model_R_1509973865970_1_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1509973865970_1_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[50];
  static {
    DeepLearning_model_R_1509973865970_1_Bias_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1509973865970_1_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
      sa[36] = 0.0;
      sa[37] = 0.0;
      sa[38] = 0.0;
      sa[39] = 0.0;
      sa[40] = 0.0;
      sa[41] = 0.0;
      sa[42] = 0.0;
      sa[43] = 0.0;
      sa[44] = 0.0;
      sa[45] = 0.0;
      sa[46] = 0.0;
      sa[47] = 0.0;
      sa[48] = 0.0;
      sa[49] = 0.0;
    }
  }
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1509973865970_1_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[20];
  static {
    DeepLearning_model_R_1509973865970_1_Bias_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1509973865970_1_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
    }
  }
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1509973865970_1_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[50];
  static {
    DeepLearning_model_R_1509973865970_1_Bias_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1509973865970_1_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
      sa[36] = 0.0;
      sa[37] = 0.0;
      sa[38] = 0.0;
      sa[39] = 0.0;
      sa[40] = 0.0;
      sa[41] = 0.0;
      sa[42] = 0.0;
      sa[43] = 0.0;
      sa[44] = 0.0;
      sa[45] = 0.0;
      sa[46] = 0.0;
      sa[47] = 0.0;
      sa[48] = 0.0;
      sa[49] = 0.0;
    }
  }
}
// Neuron bias values for Tanh layer
class DeepLearning_model_R_1509973865970_1_Bias_4 implements java.io.Serializable {
  public static final double[] VALUES = new double[210];
  static {
    DeepLearning_model_R_1509973865970_1_Bias_4_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1509973865970_1_Bias_4_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
      sa[36] = 0.0;
      sa[37] = 0.0;
      sa[38] = 0.0;
      sa[39] = 0.0;
      sa[40] = 0.0;
      sa[41] = 0.0;
      sa[42] = 0.0;
      sa[43] = 0.0;
      sa[44] = 0.0;
      sa[45] = 0.0;
      sa[46] = 0.0;
      sa[47] = 0.0;
      sa[48] = 0.0;
      sa[49] = 0.0;
      sa[50] = 0.0;
      sa[51] = 0.0;
      sa[52] = 0.0;
      sa[53] = 0.0;
      sa[54] = 0.0;
      sa[55] = 0.0;
      sa[56] = 0.0;
      sa[57] = 0.0;
      sa[58] = 0.0;
      sa[59] = 0.0;
      sa[60] = 0.0;
      sa[61] = 0.0;
      sa[62] = 0.0;
      sa[63] = 0.0;
      sa[64] = 0.0;
      sa[65] = 0.0;
      sa[66] = 0.0;
      sa[67] = 0.0;
      sa[68] = 0.0;
      sa[69] = 0.0;
      sa[70] = 0.0;
      sa[71] = 0.0;
      sa[72] = 0.0;
      sa[73] = 0.0;
      sa[74] = 0.0;
      sa[75] = 0.0;
      sa[76] = 0.0;
      sa[77] = 0.0;
      sa[78] = 0.0;
      sa[79] = 0.0;
      sa[80] = 0.0;
      sa[81] = 0.0;
      sa[82] = 0.0;
      sa[83] = 0.0;
      sa[84] = 0.0;
      sa[85] = 0.0;
      sa[86] = 0.0;
      sa[87] = 0.0;
      sa[88] = 0.0;
      sa[89] = 0.0;
      sa[90] = 0.0;
      sa[91] = 0.0;
      sa[92] = 0.0;
      sa[93] = 0.0;
      sa[94] = 0.0;
      sa[95] = 0.0;
      sa[96] = 0.0;
      sa[97] = 0.0;
      sa[98] = 0.0;
      sa[99] = 0.0;
      sa[100] = 0.0;
      sa[101] = 0.0;
      sa[102] = 0.0;
      sa[103] = 0.0;
      sa[104] = 0.0;
      sa[105] = 0.0;
      sa[106] = 0.0;
      sa[107] = 0.0;
      sa[108] = 0.0;
      sa[109] = 0.0;
      sa[110] = 0.0;
      sa[111] = 0.0;
      sa[112] = 0.0;
      sa[113] = 0.0;
      sa[114] = 0.0;
      sa[115] = 0.0;
      sa[116] = 0.0;
      sa[117] = 0.0;
      sa[118] = 0.0;
      sa[119] = 0.0;
      sa[120] = 0.0;
      sa[121] = 0.0;
      sa[122] = 0.0;
      sa[123] = 0.0;
      sa[124] = 0.0;
      sa[125] = 0.0;
      sa[126] = 0.0;
      sa[127] = 0.0;
      sa[128] = 0.0;
      sa[129] = 0.0;
      sa[130] = 0.0;
      sa[131] = 0.0;
      sa[132] = 0.0;
      sa[133] = 0.0;
      sa[134] = 0.0;
      sa[135] = 0.0;
      sa[136] = 0.0;
      sa[137] = 0.0;
      sa[138] = 0.0;
      sa[139] = 0.0;
      sa[140] = 0.0;
      sa[141] = 0.0;
      sa[142] = 0.0;
      sa[143] = 0.0;
      sa[144] = 0.0;
      sa[145] = 0.0;
      sa[146] = 0.0;
      sa[147] = 0.0;
      sa[148] = 0.0;
      sa[149] = 0.0;
      sa[150] = 0.0;
      sa[151] = 0.0;
      sa[152] = 0.0;
      sa[153] = 0.0;
      sa[154] = 0.0;
      sa[155] = 0.0;
      sa[156] = 0.0;
      sa[157] = 0.0;
      sa[158] = 0.0;
      sa[159] = 0.0;
      sa[160] = 0.0;
      sa[161] = 0.0;
      sa[162] = 0.0;
      sa[163] = 0.0;
      sa[164] = 0.0;
      sa[165] = 0.0;
      sa[166] = 0.0;
      sa[167] = 0.0;
      sa[168] = 0.0;
      sa[169] = 0.0;
      sa[170] = 0.0;
      sa[171] = 0.0;
      sa[172] = 0.0;
      sa[173] = 0.0;
      sa[174] = 0.0;
      sa[175] = 0.0;
      sa[176] = 0.0;
      sa[177] = 0.0;
      sa[178] = 0.0;
      sa[179] = 0.0;
      sa[180] = 0.0;
      sa[181] = 0.0;
      sa[182] = 0.0;
      sa[183] = 0.0;
      sa[184] = 0.0;
      sa[185] = 0.0;
      sa[186] = 0.0;
      sa[187] = 0.0;
      sa[188] = 0.0;
      sa[189] = 0.0;
      sa[190] = 0.0;
      sa[191] = 0.0;
      sa[192] = 0.0;
      sa[193] = 0.0;
      sa[194] = 0.0;
      sa[195] = 0.0;
      sa[196] = 0.0;
      sa[197] = 0.0;
      sa[198] = 0.0;
      sa[199] = 0.0;
      sa[200] = 0.0;
      sa[201] = 0.0;
      sa[202] = 0.0;
      sa[203] = 0.0;
      sa[204] = 0.0;
      sa[205] = 0.0;
      sa[206] = 0.0;
      sa[207] = 0.0;
      sa[208] = 0.0;
      sa[209] = 0.0;
    }
  }
}
class DeepLearning_model_R_1509973865970_1_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class DeepLearning_model_R_1509973865970_1_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[10500];
  static {
    DeepLearning_model_R_1509973865970_1_Weight_1_0.fill(VALUES);
    DeepLearning_model_R_1509973865970_1_Weight_1_1.fill(VALUES);
    DeepLearning_model_R_1509973865970_1_Weight_1_2.fill(VALUES);
    DeepLearning_model_R_1509973865970_1_Weight_1_3.fill(VALUES);
  }
  static final class DeepLearning_model_R_1509973865970_1_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.03864945f;
      sa[1] = -0.007672647f;
      sa[2] = 0.03538976f;
      sa[3] = 0.08627601f;
      sa[4] = -0.033259828f;
      sa[5] = 0.076015085f;
      sa[6] = -0.1333986f;
      sa[7] = 0.05723066f;
      sa[8] = -0.12754235f;
      sa[9] = -0.1098045f;
      sa[10] = 0.1390072f;
      sa[11] = 0.10481082f;
      sa[12] = -0.09966607f;
      sa[13] = 0.07096043f;
      sa[14] = -0.06688469f;
      sa[15] = -0.1333636f;
      sa[16] = -0.04905213f;
      sa[17] = -0.100591f;
      sa[18] = -0.09544361f;
      sa[19] = -0.035301406f;
      sa[20] = -0.045903955f;
      sa[21] = -0.001433922f;
      sa[22] = 0.014375294f;
      sa[23] = 0.12116666f;
      sa[24] = -0.013811699f;
      sa[25] = 0.116793945f;
      sa[26] = -0.029391054f;
      sa[27] = -0.0022895632f;
      sa[28] = -0.087066814f;
      sa[29] = 0.0035219842f;
      sa[30] = -0.09023962f;
      sa[31] = -0.0126953395f;
      sa[32] = -0.12598866f;
      sa[33] = 0.05994336f;
      sa[34] = 0.09030165f;
      sa[35] = 0.14779447f;
      sa[36] = 0.1132838f;
      sa[37] = -0.12821013f;
      sa[38] = -0.12409459f;
      sa[39] = -0.071158856f;
      sa[40] = -0.112416424f;
      sa[41] = -0.054611363f;
      sa[42] = 0.12217324f;
      sa[43] = -0.12722926f;
      sa[44] = -0.011518278f;
      sa[45] = -0.029533574f;
      sa[46] = -0.08460323f;
      sa[47] = 0.019756475f;
      sa[48] = -0.05245436f;
      sa[49] = 0.027876183f;
      sa[50] = -0.104454465f;
      sa[51] = 0.08751473f;
      sa[52] = -0.047754932f;
      sa[53] = -0.15023117f;
      sa[54] = 0.025299156f;
      sa[55] = -0.14884971f;
      sa[56] = -0.136413f;
      sa[57] = -0.089211635f;
      sa[58] = -0.04081375f;
      sa[59] = -0.07744506f;
      sa[60] = -0.07917921f;
      sa[61] = -0.04740912f;
      sa[62] = 0.09290991f;
      sa[63] = -0.017015703f;
      sa[64] = -0.010811947f;
      sa[65] = 0.08807057f;
      sa[66] = 0.14827932f;
      sa[67] = 0.10712988f;
      sa[68] = -0.07742313f;
      sa[69] = -0.0047957124f;
      sa[70] = 0.13269542f;
      sa[71] = -0.108419724f;
      sa[72] = -0.09255412f;
      sa[73] = -0.061239272f;
      sa[74] = -0.07416764f;
      sa[75] = 0.026396265f;
      sa[76] = -0.0036474627f;
      sa[77] = 0.11644891f;
      sa[78] = 0.10201626f;
      sa[79] = 0.11440536f;
      sa[80] = -0.086031735f;
      sa[81] = 0.039183706f;
      sa[82] = 0.038217004f;
      sa[83] = 0.09900299f;
      sa[84] = -0.13377611f;
      sa[85] = 0.072384395f;
      sa[86] = -0.008340423f;
      sa[87] = 0.016935969f;
      sa[88] = -0.027364364f;
      sa[89] = -0.01976381f;
      sa[90] = 0.05387698f;
      sa[91] = 0.15052298f;
      sa[92] = 0.07527074f;
      sa[93] = -0.014363395f;
      sa[94] = 0.028259085f;
      sa[95] = 0.026045905f;
      sa[96] = 0.14646062f;
      sa[97] = 0.11705334f;
      sa[98] = 0.11969009f;
      sa[99] = 0.062210776f;
      sa[100] = 0.12016975f;
      sa[101] = 0.09971147f;
      sa[102] = -0.047444686f;
      sa[103] = 0.06613459f;
      sa[104] = -0.039855286f;
      sa[105] = 0.10518273f;
      sa[106] = 0.12853718f;
      sa[107] = -0.12689881f;
      sa[108] = 0.14471196f;
      sa[109] = -0.041432198f;
      sa[110] = 0.071710944f;
      sa[111] = 0.13338476f;
      sa[112] = 0.1337345f;
      sa[113] = -0.03094187f;
      sa[114] = -0.06987591f;
      sa[115] = -0.068899244f;
      sa[116] = -0.0017167513f;
      sa[117] = -0.023106784f;
      sa[118] = -0.10970651f;
      sa[119] = 0.054408323f;
      sa[120] = 0.13077295f;
      sa[121] = 0.016669493f;
      sa[122] = -0.14463352f;
      sa[123] = 0.14492373f;
      sa[124] = -0.03935658f;
      sa[125] = -0.0025684447f;
      sa[126] = -0.04610258f;
      sa[127] = 0.056767207f;
      sa[128] = -0.053029288f;
      sa[129] = 0.07052074f;
      sa[130] = -0.052494958f;
      sa[131] = 0.09338381f;
      sa[132] = 0.044184595f;
      sa[133] = 0.124666296f;
      sa[134] = -0.13711885f;
      sa[135] = 0.03329237f;
      sa[136] = 0.105707586f;
      sa[137] = -0.13436489f;
      sa[138] = -0.009485196f;
      sa[139] = 0.041021593f;
      sa[140] = 0.11939428f;
      sa[141] = -0.00521331f;
      sa[142] = 0.108047985f;
      sa[143] = 0.085524514f;
      sa[144] = -0.024139678f;
      sa[145] = 0.035150267f;
      sa[146] = 0.018675683f;
      sa[147] = -0.009116873f;
      sa[148] = -0.06518695f;
      sa[149] = -0.031792894f;
      sa[150] = -0.04216783f;
      sa[151] = 0.083798654f;
      sa[152] = -0.050035406f;
      sa[153] = 0.03573112f;
      sa[154] = -0.028760167f;
      sa[155] = -0.053083092f;
      sa[156] = 0.083564974f;
      sa[157] = 0.09965723f;
      sa[158] = -0.10799159f;
      sa[159] = -0.11842669f;
      sa[160] = 0.09028169f;
      sa[161] = -0.007911453f;
      sa[162] = 0.0550466f;
      sa[163] = 0.09299843f;
      sa[164] = -0.021579763f;
      sa[165] = 0.07314342f;
      sa[166] = 0.13363628f;
      sa[167] = 6.477658E-5f;
      sa[168] = -0.024337485f;
      sa[169] = 0.12892616f;
      sa[170] = 0.0035142514f;
      sa[171] = -0.11058667f;
      sa[172] = -0.100190274f;
      sa[173] = 0.055189263f;
      sa[174] = -0.061086703f;
      sa[175] = -0.016089944f;
      sa[176] = -0.035538927f;
      sa[177] = 0.0935532f;
      sa[178] = 0.0678239f;
      sa[179] = -0.118448146f;
      sa[180] = -0.0051173675f;
      sa[181] = 0.03680302f;
      sa[182] = -0.13249566f;
      sa[183] = 0.0679082f;
      sa[184] = -0.018549064f;
      sa[185] = 0.14622056f;
      sa[186] = -0.075026415f;
      sa[187] = -0.14863239f;
      sa[188] = 0.121948525f;
      sa[189] = -0.04795799f;
      sa[190] = -0.059144184f;
      sa[191] = 0.007675146f;
      sa[192] = -0.14646743f;
      sa[193] = 0.06581588f;
      sa[194] = -0.004420562f;
      sa[195] = -0.1387734f;
      sa[196] = -0.13865495f;
      sa[197] = -0.0548303f;
      sa[198] = 0.13360117f;
      sa[199] = 0.022175284f;
      sa[200] = -0.13984439f;
      sa[201] = 0.06335515f;
      sa[202] = -0.09416401f;
      sa[203] = -0.052455917f;
      sa[204] = 0.07483641f;
      sa[205] = -0.04232223f;
      sa[206] = -0.05452232f;
      sa[207] = -0.13905175f;
      sa[208] = -0.141426f;
      sa[209] = 0.036748186f;
      sa[210] = 0.09153396f;
      sa[211] = 0.1195483f;
      sa[212] = 0.02783667f;
      sa[213] = -0.0012996966f;
      sa[214] = -0.09709976f;
      sa[215] = 0.009600081f;
      sa[216] = -0.012952925f;
      sa[217] = -0.13818933f;
      sa[218] = -0.07844777f;
      sa[219] = -0.1488677f;
      sa[220] = 0.051828124f;
      sa[221] = -0.11679224f;
      sa[222] = 0.049744464f;
      sa[223] = 0.123052806f;
      sa[224] = 0.04301366f;
      sa[225] = 0.118978016f;
      sa[226] = 0.05335998f;
      sa[227] = 0.11073073f;
      sa[228] = -0.04437009f;
      sa[229] = 0.07561065f;
      sa[230] = -0.10080308f;
      sa[231] = -0.0417216f;
      sa[232] = 0.018319022f;
      sa[233] = 0.09471797f;
      sa[234] = -0.06237682f;
      sa[235] = -0.036201995f;
      sa[236] = -0.056925282f;
      sa[237] = 0.13956746f;
      sa[238] = -0.068991765f;
      sa[239] = -0.07854114f;
      sa[240] = 0.07969909f;
      sa[241] = 0.11161528f;
      sa[242] = -0.059536103f;
      sa[243] = -0.15025184f;
      sa[244] = 0.01448326f;
      sa[245] = -0.11970451f;
      sa[246] = 0.048341397f;
      sa[247] = 0.07236681f;
      sa[248] = -0.062049296f;
      sa[249] = 0.11655166f;
      sa[250] = 0.055845432f;
      sa[251] = -0.09698564f;
      sa[252] = -0.08150373f;
      sa[253] = -0.08365832f;
      sa[254] = -0.052685034f;
      sa[255] = -0.060619757f;
      sa[256] = -0.08496327f;
      sa[257] = 0.15092202f;
      sa[258] = -0.028442713f;
      sa[259] = 0.10461928f;
      sa[260] = 0.060712494f;
      sa[261] = 0.13666072f;
      sa[262] = 0.07149845f;
      sa[263] = -0.13215834f;
      sa[264] = -0.110053375f;
      sa[265] = -0.08325146f;
      sa[266] = 0.005133304f;
      sa[267] = 0.13204992f;
      sa[268] = 0.03220441f;
      sa[269] = 0.01070791f;
      sa[270] = 0.07532726f;
      sa[271] = -0.112414196f;
      sa[272] = -0.09989095f;
      sa[273] = 0.12496584f;
      sa[274] = -0.13231385f;
      sa[275] = 0.00505346f;
      sa[276] = 1.3465995E-4f;
      sa[277] = -0.07833265f;
      sa[278] = 0.054497056f;
      sa[279] = 0.10683831f;
      sa[280] = 0.14855467f;
      sa[281] = 0.13700487f;
      sa[282] = 0.13531297f;
      sa[283] = 0.112956226f;
      sa[284] = -0.0030762446f;
      sa[285] = 